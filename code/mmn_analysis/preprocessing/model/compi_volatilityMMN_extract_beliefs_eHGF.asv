function [regressors, bopars] = compi_volatilityMMN_extract_beliefs_eHGF(inputValues)
% COMPI_VOLATILITYMMN_EXTRACT_BELIEFS_EHGF Applies bayesian learning model 
% to input values (tones) and creates regressors from behavioral model.
%   IN:     inputValues     - tone sequence
%   OUT:    -

inputValues = inputValues';

u = inputValues;
bopars = tapas_fitModel([],...
    u,...
    'tapas_ehgf_binary_config',...
    'tapas_bayes_optimal_binary_config',...
    'tapas_quasinewton_optim_config');

tapas_hgf_binary_plotTraj(bopars);

% precision-weighted prediction errors
regressors.epsilon2            = abs(bopars.traj.epsi(:,2));
regressors.epsilon3            = bopars.traj.epsi(:,3);

% prediction errors
regressors.delta1              = abs(bopars.traj.da(:,1));
regressors.delta2              = bopars.traj.da(:,2);
regressors.delta3              = bopars.traj.da(:,3);



% precision
regressors.pi1                 = 1./bopars.traj.sahat(:,1);
% 1/informationalUncertainty
regressors.pi2                 = 1./(tapas_sgm(bopars.traj.muhat(:,2), 1).*(1 -tapas_sgm(bopars.traj.muhat(:,2), 1)).*bopars.traj.sahat(:,2));
% 1/volatilityUncertainty;
regressors.pi3                 = 1./(tapas_sgm(bopars.traj.muhat(:,2), 1).*(1-tapas_sgm(bopars.traj.muhat(:,2), 1)).*exp(bopars.traj.muhat(:,3)));

% irreducibleUncertainty
regressors.sig1                = bopars.traj.sahat(:,1);
% informationalUncertainty
regressors.sig2                = (tapas_sgm(bopars.traj.muhat(:,2), 1).*(1 -tapas_sgm(bopars.traj.muhat(:,2), 1)).*bopars.traj.sahat(:,2));
% volatilityUncertainty
regressors.sig3                = (tapas_sgm(bopars.traj.muhat(:,2), 1).*(1-tapas_sgm(bopars.traj.muhat(:,2), 1)).*exp(bopars.traj.muhat(:,3)));

% predictionProb
regressors.mu2                 = bopars.traj.mu(:,2);
% predictionVol
regressors.mu3                 = bopars.traj.mu(:,3);

end